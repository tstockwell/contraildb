package com.googlecode.contraildb.cvm.wrapper;

import com.contrail.cvm.wrapper.model.ClassItem;
import com.contrail.cvm.wrapper.model.Storage;
import com.contrail.cvm.wrapper.model.StorageItem;
import com.contraildb.cvm.utils.Utils;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.PrintStream;
import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.TreePath;

public class MainForm extends javax.swing.JFrame implements WindowListener, TreeSelectionListener
{

    protected ClassItemProperties p_ClassInfoPanel;
    protected Storage p_CurrentModel;
    public static final long serialVersionUID = 982349823l;
    protected File p_LastAddedFile;
    protected File p_LastSavedStub;
    protected static final FileFilter FILTER_CLASS = new FileFilter()
    {

        @Override
        public boolean accept(File f)
        {
            if (f == null)
            {
                return false;
            }
            if (f.isDirectory())
            {
                return true;
            }
            return f.getName().toLowerCase().endsWith(".class");
        }

        @Override
        public String getDescription()
        {
            return "Java class file (*.class)";
        }
    };
    protected static final FileFilter FILTER_JAVA = new FileFilter()
    {

        @Override
        public boolean accept(File f)
        {
            if (f == null)
            {
                return false;
            }
            if (f.isDirectory())
            {
                return true;
            }
            return f.getName().toLowerCase().endsWith(".java");
        }

        @Override
        public String getDescription()
        {
            return "Java source file (*.java)";
        }
    };


    protected static final FileFilter FILTER_JAR = new FileFilter()
    {

        @Override
        public boolean accept(File f)
        {
            if (f == null)
            {
                return false;
            }
            if (f.isDirectory())
            {
                return true;
            }

            String s_fileName = f.getName().toLowerCase();

            return s_fileName.endsWith(".zip") || s_fileName.endsWith(".jar");
        }

        @Override
        public String getDescription()
        {
            return "JAR or ZIP archive (*.jar, *.zip)";
        }
    };

    /** Creates new form MainForm */
    public MainForm()
    {
        try
        {
            initComponents();
            setTitle(main.APPLICATION + ' ' + main.VERSION);

            p_CurrentModel = new Storage("Default");

            p_Classes_Tree.setModel(p_CurrentModel);
            p_Classes_Tree.setCellRenderer(new TRender());
            p_Classes_Tree.addTreeSelectionListener(this);

            p_ClassInfoPanel = new ClassItemProperties();

            addWindowListener(this);

            Utils.toScreenCenter(this);

            setIconImage(Utils.loadImage("images/appico.png"));

            setVisible(true);
        }
        catch (Throwable _thr)
        {
            _thr.printStackTrace();
            dispose();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        p_LeftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        p_Classes_Tree = new javax.swing.JTree();
        jToolBar1 = new javax.swing.JToolBar();
        p_Button_Add = new javax.swing.JButton();
        p_Button_Remove = new javax.swing.JButton();
        p_Button_RemoveAll = new javax.swing.JButton();
        p_RightMainPanel = new javax.swing.JScrollPane();
        p_Panel_Empty = new javax.swing.JPanel();
        p_PanelState = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        p_Menu_File_GenerateStub = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        p_Menu_File_Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        p_Menu_Help_Help = new javax.swing.JMenuItem();
        p_Menu_Help_About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(200);

        p_LeftPanel.setLayout(new java.awt.BorderLayout());

        p_Classes_Tree.setRootVisible(false);
        jScrollPane1.setViewportView(p_Classes_Tree);

        p_LeftPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);

        p_Button_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_add.gif"))); // NOI18N
        p_Button_Add.setToolTipText("Add new item int the tree");
        p_Button_Add.setFocusable(false);
        p_Button_Add.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        p_Button_Add.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        p_Button_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_Button_AddActionPerformed(evt);
            }
        });
        jToolBar1.add(p_Button_Add);

        p_Button_Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_remove.gif"))); // NOI18N
        p_Button_Remove.setToolTipText("Remove selected items from the tree");
        p_Button_Remove.setFocusable(false);
        p_Button_Remove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        p_Button_Remove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        p_Button_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_Button_RemoveActionPerformed(evt);
            }
        });
        jToolBar1.add(p_Button_Remove);

        p_Button_RemoveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icon_removeall.gif"))); // NOI18N
        p_Button_RemoveAll.setToolTipText("Clear the tree");
        p_Button_RemoveAll.setFocusable(false);
        p_Button_RemoveAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        p_Button_RemoveAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        p_Button_RemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_Button_RemoveAllActionPerformed(evt);
            }
        });
        jToolBar1.add(p_Button_RemoveAll);

        p_LeftPanel.add(jToolBar1, java.awt.BorderLayout.NORTH);

        jSplitPane1.setLeftComponent(p_LeftPanel);

        p_Panel_Empty.setPreferredSize(new java.awt.Dimension(500, 400));

        javax.swing.GroupLayout p_Panel_EmptyLayout = new javax.swing.GroupLayout(p_Panel_Empty);
        p_Panel_Empty.setLayout(p_Panel_EmptyLayout);
        p_Panel_EmptyLayout.setHorizontalGroup(
            p_Panel_EmptyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 542, Short.MAX_VALUE)
        );
        p_Panel_EmptyLayout.setVerticalGroup(
            p_Panel_EmptyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );

        p_RightMainPanel.setViewportView(p_Panel_Empty);

        jSplitPane1.setRightComponent(p_RightMainPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        p_PanelState.setPreferredSize(new java.awt.Dimension(759, 20));

        javax.swing.GroupLayout p_PanelStateLayout = new javax.swing.GroupLayout(p_PanelState);
        p_PanelState.setLayout(p_PanelStateLayout);
        p_PanelStateLayout.setHorizontalGroup(
            p_PanelStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 759, Short.MAX_VALUE)
        );
        p_PanelStateLayout.setVerticalGroup(
            p_PanelStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        getContentPane().add(p_PanelState, java.awt.BorderLayout.SOUTH);

        jMenu1.setText("File");

        p_Menu_File_GenerateStub.setText("Generate stub");
        p_Menu_File_GenerateStub.setToolTipText("Generate stub as java class source");
        p_Menu_File_GenerateStub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_Menu_File_GenerateStubActionPerformed(evt);
            }
        });
        jMenu1.add(p_Menu_File_GenerateStub);
        jMenu1.add(jSeparator1);

        p_Menu_File_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        p_Menu_File_Exit.setText("Exit");
        p_Menu_File_Exit.setToolTipText("Close the application");
        p_Menu_File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_Menu_File_ExitActionPerformed(evt);
            }
        });
        jMenu1.add(p_Menu_File_Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        p_Menu_Help_Help.setText("Help");
        p_Menu_Help_Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_Menu_Help_HelpActionPerformed(evt);
            }
        });
        jMenu2.add(p_Menu_Help_Help);

        p_Menu_Help_About.setText("About");
        p_Menu_Help_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p_Menu_Help_AboutActionPerformed(evt);
            }
        });
        jMenu2.add(p_Menu_Help_About);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void p_Button_AddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_p_Button_AddActionPerformed
    {//GEN-HEADEREND:event_p_Button_AddActionPerformed
        final FileFilter[] p_selectedFilter = new FileFilter[1];

        File p_file = Utils.selectFileForOpen(this, new FileFilter[]
                {
                    FILTER_JAR, FILTER_CLASS
                }, "Add item in the tree", p_selectedFilter, p_LastAddedFile);

        try
        {
            if (p_file != null)
            {
                p_LastAddedFile = p_file;

                if (p_selectedFilter[0].equals(FILTER_CLASS))
                {
                    // class
                    p_CurrentModel.addClass(p_file);
                }
                else
                {
                    // jar or zip
                    p_CurrentModel.addArchive(p_file);
                }
            }
        }
        catch (Throwable _thr)
        {
            _thr.printStackTrace();
            JOptionPane.showMessageDialog(this, "Can't load or parse " + _thr, "Error during operation", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_p_Button_AddActionPerformed

    private void p_Button_RemoveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_p_Button_RemoveActionPerformed
    {//GEN-HEADEREND:event_p_Button_RemoveActionPerformed
        TreePath[] ap_paths =  p_Classes_Tree.getSelectionPaths();
        
        if (ap_paths == null) return;

        if (ap_paths.length>0)
        {
            if (p_CurrentModel.getChildCount(p_CurrentModel)>0)
            {
                if (JOptionPane.showConfirmDialog(this,"Do you really want to remove selected items?", "Confirmation", JOptionPane.YES_NO_OPTION)==JOptionPane.NO_OPTION) return;
            }
        }

        p_Classes_Tree.setSelectionPath(null);



        for(int li=0;li<ap_paths.length;li++)
        {
            p_CurrentModel.removeItem((StorageItem)ap_paths[li].getLastPathComponent());
        }
    }//GEN-LAST:event_p_Button_RemoveActionPerformed

    private void p_Button_RemoveAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_p_Button_RemoveAllActionPerformed
    {//GEN-HEADEREND:event_p_Button_RemoveAllActionPerformed
        if (p_CurrentModel.getChildCount(p_CurrentModel)>0)
        {
            if (JOptionPane.showConfirmDialog(this,"Do you really want to remove all items?", "Confirmation", JOptionPane.YES_NO_OPTION)==JOptionPane.NO_OPTION) return;
        }

        p_Classes_Tree.setSelectionPath(null);
        p_CurrentModel.removeAll();
    }//GEN-LAST:event_p_Button_RemoveAllActionPerformed

    private void p_Menu_File_ExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_p_Menu_File_ExitActionPerformed
    {//GEN-HEADEREND:event_p_Menu_File_ExitActionPerformed
        windowClosing(null);
    }//GEN-LAST:event_p_Menu_File_ExitActionPerformed

    private void p_Menu_File_GenerateStubActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_p_Menu_File_GenerateStubActionPerformed
    {//GEN-HEADEREND:event_p_Menu_File_GenerateStubActionPerformed
        ClassItem[] ap_classItem = p_CurrentModel.getAllClassItems();
        if (ap_classItem.length == 0)
        {
            JOptionPane.showMessageDialog(this, "You have not any class to make stub", "Can't make stub", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            GenerateStubDialog p_dialog = new GenerateStubDialog(this);
            String s_result = p_dialog.process(ap_classItem);
            if (s_result == null)
            {
                s_result = p_dialog.getError();
                if (s_result != null)
                {
                    JOptionPane.showMessageDialog(this, "Error during operation: " + s_result, "Error", JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    System.out.println("Operation was canceled");
                }
            }
            else
            {
                File p_fileToSave = Utils.selectFileForSave(this, FILTER_JAVA, "Save generated file", p_LastSavedStub);

                if (p_fileToSave != null)
                {
                    p_LastSavedStub = p_fileToSave;

                    PrintStream p_fos = null;
                    try
                    {
                        String s_fileName = p_fileToSave.getName();
                        String s_className = null;
                        int i_index = s_fileName.lastIndexOf('.');
                        if (i_index < 0)
                        {
                            s_className = s_fileName;
                            s_fileName += ".java";
                            p_fileToSave = new File(p_fileToSave.getParentFile(), s_fileName);
                        }
                        else
                        {
                            s_className = s_fileName.substring(0, i_index);
                        }

                        s_result = s_result.replace((CharSequence) GenerateStubDialog.MACROS_CLASSNAME, (CharSequence) s_className);

                        p_fos = new PrintStream(p_fileToSave);
                        p_fos.print(s_result);
                    }
                    catch (Throwable _thr)
                    {
                        _thr.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Can't save the file : " + _thr.getMessage(), "Can't save", JOptionPane.ERROR_MESSAGE);
                    }
                    finally
                    {
                        if (p_fos != null)
                        {
                            try
                            {
                                p_fos.close();
                            }
                            catch (Throwable _t)
                            {
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_p_Menu_File_GenerateStubActionPerformed

    private void p_Menu_Help_HelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_p_Menu_Help_HelpActionPerformed
    {//GEN-HEADEREND:event_p_Menu_Help_HelpActionPerformed
        new HelpDialog(this);
    }//GEN-LAST:event_p_Menu_Help_HelpActionPerformed

    private void p_Menu_Help_AboutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_p_Menu_Help_AboutActionPerformed
    {//GEN-HEADEREND:event_p_Menu_Help_AboutActionPerformed
        new AboutDialog(this);

}//GEN-LAST:event_p_Menu_Help_AboutActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton p_Button_Add;
    private javax.swing.JButton p_Button_Remove;
    private javax.swing.JButton p_Button_RemoveAll;
    private javax.swing.JTree p_Classes_Tree;
    private javax.swing.JPanel p_LeftPanel;
    private javax.swing.JMenuItem p_Menu_File_Exit;
    private javax.swing.JMenuItem p_Menu_File_GenerateStub;
    private javax.swing.JMenuItem p_Menu_Help_About;
    private javax.swing.JMenuItem p_Menu_Help_Help;
    private javax.swing.JPanel p_PanelState;
    private javax.swing.JPanel p_Panel_Empty;
    private javax.swing.JScrollPane p_RightMainPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent e)
    {
    }

    @Override
    public void windowClosing(WindowEvent e)
    {
        dispose();
    }

    @Override
    public void windowClosed(WindowEvent e)
    {
    }

    @Override
    public void windowIconified(WindowEvent e)
    {
    }

    @Override
    public void windowDeiconified(WindowEvent e)
    {
    }

    @Override
    public void windowActivated(WindowEvent e)
    {
    }

    @Override
    public void windowDeactivated(WindowEvent e)
    {
    }

    @Override
    public void valueChanged(TreeSelectionEvent e)
    {
        TreePath[] ap_paths = p_Classes_Tree.getSelectionPaths();
        if (ap_paths == null) return;
        Object[] ap_objects = new Object[ap_paths.length];
        for (int li = 0; li < ap_paths.length; li++)
        {
            ap_objects[li] = ap_paths[li].getLastPathComponent();
        }

        selectObjects(ap_objects);
    }

    public synchronized void selectObjects(Object[] _objects)
    {
        if (_objects == null || _objects.length == 0 || _objects.length > 1)
        {
            p_RightMainPanel.setViewportView(p_Panel_Empty);
        }
        else
        {
            if (_objects[0] instanceof ClassItem)
            {
                p_ClassInfoPanel.setModel((ClassItem) _objects[0]);
                p_RightMainPanel.setViewportView(p_ClassInfoPanel);
            }
            else
            {
                p_RightMainPanel.setViewportView(p_Panel_Empty);
            }
        }

        p_RightMainPanel.doLayout();

        p_RightMainPanel.repaint();
    }
}
